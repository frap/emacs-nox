;; -*- lexical-binding: t -*-

(defconst EMACS26+   (> emacs-major-version 25))
(defconst EMACS27+   (> emacs-major-version 26))
(defconst EMACS28+   (> emacs-major-version 27))
(defconst IS-MAC     (eq system-type 'darwin))
(defconst IS-LINUX   (eq system-type 'gnu/linux))
(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))

;; Ensure `doom-core-dir' is in `load-path'
(add-to-list 'load-path (file-name-directory load-file-name))

(defvar enfer--initial-load-path load-path)
(defvar enfer--initial-process-environment process-environment)
(defvar enfer--initial-exec-path exec-path)

;; `file-name-handler-alist' is consulted on every `require', `load' and various
;; path/io functions. You get a minor speed up by nooping this. However, this
;; may cause problems on builds of Emacs where its site lisp files aren't
;; byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)
(unless noninteractive
  (defvar enfer--initial-file-name-handler-alist file-name-handler-alist)

  (setq file-name-handler-alist nil)
  ;; Restore `file-name-handler-alist', because it is needed for handling
  ;; encrypted or compressed files, among other things.
  (defun enfer-reset-file-handler-alist-h ()
    ;; Re-add rather than `setq', because file-name-handler-alist may have
    ;; changed since startup, and we want to preserve those.
    (dolist (handler file-name-handler-alist)
      (add-to-list 'enfer--initial-file-name-handler-alist handler))
    (setq file-name-handler-alist enfer--initial-file-name-handler-alist))
  (add-hook 'emacs-startup-hook #'enfer-reset-file-handler-alist-h))


;; Just the bare necessities
(require 'subr-x)
(require 'cl-lib)
(require 'core-lib)


;; Measure startup time
;;(require 'init-benchmarking)

;;
;;; Global variables

(setq-default user-full-name "Andr√©s Gasson")

(defvar doom-debug-mode (when (or (getenv "DEBUG") init-file-debug) t)
  "If non-nil, all functions will be verbose. Set DEBUG=1 in the command
line or use --debug-init to enable this.")

(defvar doom-interactive-mode (not noninteractive)
  "If non-nil, Emacs is in interactive mode.")

(defconst enfer-emacs-dir (eval-when-compile (file-truename user-emacs-directory))
  "The path to the emacs.d directory. Must end in a slash.")

(defconst enfer-core-dir (concat enfer-emacs-dir "core/")
  "The root directory of Enfer's core files. Must end with a slash.")

(defconst enfer-local-dir (concat enfer-emacs-dir ".local/")
  "Root directory for local Emacs files. Use this as permanent storage for files
that are safe to share across systems (if this config is symlinked across
several computers).")

(defconst enfer-etc-dir (concat enfer-local-dir "etc/")
  "Directory for non-volatile storage.
Use this for files that don't change much, like servers binaries, external
dependencies or long-term shared data.")

(defconst enfer-cache-dir (concat enfer-local-dir "cache/")
  "Directory for volatile storage.
Use this for files that change often, like cache files.")

(defconst enfer-packages-dir (concat enfer-local-dir "packages/")
  "Where packages are stored.")

(defconst doom-autoload-file (concat enfer-local-dir "autoloads.el")
  "Where `doom-reload-core-autoloads' stores its core autoloads.

This file is responsible for informing Emacs where to find all of Doom's
autoloaded core functions (in core/autoload/*.el).")

(defconst doom-package-autoload-file (concat enfer-local-dir "autoloads.pkg.el")
  "Where `doom-reload-package-autoloads' stores its package autoloads.

This file is compiled from the autoloads files of all installed packages
combined.")

(defconst doom-env-file (concat enfer-local-dir "env")
  "The location of your envvar file, generated by `doom env`.

This file contains environment variables scraped from your shell environment,
which is loaded at startup (if it exists). This is helpful if Emacs can't
\(easily) be launched from the correct shell session (particularly for MacOS
users).")

(defconst enfer-develop-dir  "~/Dev"
  "Where gas development goes on.")

(dolist (dir (list enfer-local-dir enfer-etc-dir enfer-cache-dir enfer-packages-dir))
  (unless (file-directory-p dir) (make-directory dir t)))

;;
;;; Emacs core configuration

;; lo', longer logs ahoy, so to reliably locate lapses in doom's logic later
(setq message-log-max 8192)

;; Reduce debug output, well, unless we've asked for it.
(setq debug-on-error doom-debug-mode
      jka-compr-verbose doom-debug-mode)

;; Contrary to what many Emacs users have in their configs, you really don't
;; need more than this to make UTF-8 the default coding system:
(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))       ; pretty
(prefer-coding-system 'utf-8)            ; pretty
(setq locale-coding-system 'utf-8)       ; please
;; The clipboard's on Windows could be in an encoding that's wider (or thinner)

;; Disable warnings from legacy advice system. They aren't useful, and what can
;; we do about them, besides changing packages upstream?
(setq ad-redefinition-action 'accept)

;; Make apropos omnipotent. It's more useful this way.
(setq apropos-do-all t)

;; A second, case-insensitive pass over `auto-mode-alist' is time wasted, and
;; indicates misconfiguration (or that the user needs to stop relying on case
;; insensitivity).
(setq auto-mode-case-fold nil)

;; Less noise at startup. The dashboard/empty scratch buffer is good enough.
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message user-login-name
      inhibit-default-init t
      ;; Avoid pulling in many packages by starting the scratch buffer in
      ;; `fundamental-mode', rather than, say, `org-mode' or `text-mode'.
      initial-major-mode 'fundamental-mode
      initial-scratch-message nil)

;; Get rid of "For information about GNU Emacs..." message at startup, unless
;; we're in a daemon session, where it'll say "Starting Emacs daemon." instead,
;; which isn't so bad.
(unless (daemonp)
  (advice-add #'display-startup-echo-area-message :override #'ignore))

;; Emacs "updates" its ui more often than it needs to, so we slow it down
;; slightly from 0.5s:
(setq idle-update-delay 1)

;; Emacs is essentially one huge security vulnerability, what with all the
;; dependencies it pulls in from all corners of the globe. Let's try to be at
;; least a little more discerning.
(setq gnutls-verify-error (not (getenv "INSECURE"))
      gnutls-algorithm-priority
      (when (boundp 'libgnutls-version)
        (concat "SECURE128:+SECURE192:-VERS-ALL"
                (if (and (not IS-WINDOWS)
                         (not (version< emacs-version "26.3"))
                         (>= libgnutls-version 30605))
                    ":+VERS-TLS1.3")
                ":+VERS-TLS1.2"))
      ;; `gnutls-min-prime-bits' is set based on recommendations from
      ;; https://www.keylength.com/en/4/
      gnutls-min-prime-bits 3072
      tls-checktrust gnutls-verify-error
      ;; Emacs is built with `gnutls' by default, so `tls-program' would not be
      ;; used in that case. Otherwise, people have reasons to not go with
      ;; `gnutls', we use `openssl' instead. For more details, see
      ;; https://redd.it/8sykl1
      tls-program '("openssl s_client -connect %h:%p -CAfile %t -nbio -no_ssl3 -no_tls1 -no_tls1_1 -ign_eof"
                    "gnutls-cli -p %p --dh-bits=3072 --ocsp --x509cafile=%t \
--strict-tofu --priority='SECURE192:+SECURE128:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.3' %h"
                    ;; compatibility fallbacks
                    "gnutls-cli -p %p %h"))

;; Emacs stores `authinfo' in $HOME and in plain-text. Let's not do that, mkay?
;; This file stores usernames, passwords, and other such treasures for the
;; aspiring malicious third party.
(setq auth-sources (list (concat enfer-etc-dir "authinfo.gpg")
                         "~/.authinfo.gpg"))


;; Don't litter `enfer-emacs-dir'. We don't use `no-littering' because it's a
;; mote too opinionated for our needs.
(setq abbrev-file-name             (concat enfer-local-dir "abbrev.el")
      async-byte-compile-log-file  (concat enfer-etc-dir "async-bytecomp.log")
      bookmark-default-file        (concat enfer-etc-dir "bookmarks")
      custom-file                  (concat enfer-local-dir "custom.el")
      desktop-dirname              (concat enfer-etc-dir "desktop")
      desktop-base-file-name       "autosave"
      desktop-base-lock-name       "autosave-lock"
      pcache-directory             (concat enfer-cache-dir "pcache/")
      request-storage-directory    (concat enfer-cache-dir "request")
      server-auth-dir              (concat enfer-cache-dir "server/")
      shared-game-score-directory  (concat enfer-etc-dir "shared-game-score/")
      tramp-auto-save-directory    (concat enfer-cache-dir "tramp-auto-save/")
      tramp-backup-directory-alist backup-directory-alist
      tramp-persistency-file-name  (concat enfer-cache-dir "tramp-persistency.el")
      url-cache-directory          (concat enfer-cache-dir "url/")
      url-configuration-directory  (concat enfer-etc-dir "url/")
      gamegrid-user-score-file-directory (concat enfer-etc-dir "games/"))

;; HACK Stop sessions from littering the user directory
(defadvice! enfer--use-cache-dir-a (session-id)
  :override #'emacs-session-filename
  (concat enfer-cache-dir "emacs-session." session-id))

;;
;;; Optimisations

;; Disable bidirectional text rendering for a modest performance boost. I've set
;; this to `nil' in the past, but the `bidi-display-reordering's docs say that
;; is an undefined state and suggest this to be just as good:
(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right)

;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
;; in non-focused windows.
(setq-default cursor-in-non-selected-windows nil)
(setq highlight-nonselected-windows nil)

;; More performant rapid scrolling over unfontified regions. May cause brief
;; spells of inaccurate syntax highlighting right after scrolling, which should
;; quickly self-correct.
(setq fast-but-imprecise-scrolling t)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we halve startup times, particularly when we use
;; fonts that are larger than the system default (which would resize the frame).
(setq frame-inhibit-implied-resize t)

;; Don't ping things that look like domain names.
(setq ffap-machine-p-known 'reject)

;; Font compacting can be terribly expensive, especially for rendering icon
;; fonts on Windows. Whether it has a notable affect on Linux and Mac hasn't
;; been determined, but we inhibit it there anyway.
(setq inhibit-compacting-font-caches t)

;; Remove command line options that aren't relevant to our current OS; means
;; slightly less to process at startup.
(unless IS-MAC   (setq command-line-ns-option-alist nil))
(unless IS-LINUX (setq command-line-x-option-alist nil))

;; Delete files to trash on macOS, as an extra layer of precaution against
;; accidentally deleting wanted files.
(setq delete-by-moving-to-trash IS-MAC)

(eval-and-compile
  (unless EMACS26+
    (with-no-warnings
      (defalias 'if-let* #'if-let)
      (defalias 'when-let* #'when-let)

      ;; `alist-get' doesn't have its 5th argument before Emacs 26
      (defun gas*alist-get (key alist &optional default remove testfn)
        (ignore remove)
        (let ((x (if (not testfn)
                     (assq key alist)
                   (assoc key alist testfn))))
          (if x (cdr x) default)))
      (advice-add #'alist-get :override #'gas*alist-get)
      (defvar gensym-counter 0
 	  "Number used to construct the name of the next symbol created by `gensym'.")

      (defun gensym (&optional prefix)
        "Return a new uninterned symbol.
 	The name is made by appending `gensym-counter' to PREFIX.
 	PREFIX is a string, and defaults to \"g\"."
        (let ((num (prog1 gensym-counter
                     (setq gensym-counter (1+ gensym-counter)))))
          (make-symbol (format "%s%d" (or prefix "g") num))))
      (defun cadar (x)
 	      "Return the `car' of the `cdr' of the `car' of X."
 	      (declare (compiler-macro internal--compiler-macro-cXXr))
 	       (car (cdr (car x))))
)))

(require 'core-packages)

;; Adopt a sneaky garbage collection strategy of waiting until idle time to
;; collect; staving off the collector while the user is working.
(when doom-interactive-mode
  (setq gc-cons-percentage 0.6)
  (add-transient-hook! 'pre-command-hook (gcmh-mode +1))
  (with-eval-after-load 'gcmh
    (setq gcmh-idle-delay 10
          gcmh-high-cons-threshold 16777216
          gcmh-verbose doom-debug-mode  ; 16mb
          gc-cons-percentage 0.1)
    (add-hook 'focus-out-hook #'gcmh-idle-garbage-collect)))

;; HACK `tty-run-terminal-initialisation' is *tremendously* slow for some
;;      reason. Disabling it completely could have many side-effects, so we
;;      defer it until later, at which time it (somehow) runs very quickly.
(unless (daemonp)
  (advice-add #'tty-run-terminal-initialisation :override #'ignore)
  (add-hook! 'window-setup-hook
    (defun doom-init-tty-h ()
      (advice-remove #'tty-run-terminal-initialisation #'ignore)
      (tty-run-terminal-initialisation (selected-frame) nil t))))


(defmacro set-env! (&rest _vars)
  "Inject VARS from your shell environment into Emacs.")

(cond (IS-MAC
       (setq! mac-command-modifier 'super
              mac-option-modifier  'meta
              mac-right-option-modifier 'alt
             ;; sane trackpad/mouse scroll settings
             mac-redisplay-dont-reset-vscroll t
             mac-mouse-wheel-smooth-scroll nil
             mouse-wheel-scroll-amount '(5 ((shift) . 2))  ; one line at a time
             mouse-wheel-progressive-speed nil             ; don't accelerate scrolling
             ;; Curse Lion and its sudden but inevitable fullscreen mode!
             ;; NOTE Meaningless to railwaycat's emacs-mac build
             ns-use-native-fullscreen nil
             ;; Visit files opened outside of Emacs in existing frame, rather
             ;; than a new one
             ns-pop-up-frames nil)

       ;; Fix the clipboard in terminal or daemon Emacs (non-GUI)
       (when (or (daemonp) (not (display-graphic-p)))
         (add-hook 'emacs-startup-hook #'osx-clipboard-mode))

       (when (or (daemonp) (display-graphic-p))
         ;; Syncs ns frame parameters with theme (and fixes mismatching text
         ;; colr in the frame title)
         (when (require 'ns-auto-titlebar nil t)
           (add-hook 'doom-load-theme-hook #'ns-auto-titlebar-mode))

         ;; A known problem with GUI Emacs on MacOS (or daemons started via
         ;; launchctl or brew services): it runs in an isolated
         ;; environment, so envvars will be wrong. That includes the PATH
         ;; Emacs picks up. `exec-path-from-shell' fixes this.
         (when (require 'exec-path-from-shell nil t)
           (defun set-env! (&rest vars)
             "Inject VARS from your shell environment into Emacs."
             (exec-path-from-shell-copy-envs vars))
           (setq! exec-path-from-shell-check-startup-files nil
                 exec-path-from-shell-arguments (delete "-i" exec-path-from-shell-arguments)
                 exec-path-from-shell-debug doom-debug-mode
                 exec-path-from-shell-variables
                 (nconc exec-path-from-shell-variables '("LC_CTYPE" "LC_ALL" "LANG")))
           (exec-path-from-shell-initialize))))

      (IS-LINUX
       (setq! x-gtk-use-system-tooltips nil    ; native tooltips are ugly!
             x-underline-at-descent-line t))  ; draw underline lower

      (IS-WINDOWS
       (setq! w32-get-true-file-attributes nil) ; fix file io slowdowns
       (when (display-graphic-p)
         (setenv "GIT_ASKPASS" "git-gui--askpass"))))

(defun enfer-pos-at-line (line &optional column)
  (save-excursion
    (goto-char (point-min))
    (forward-line (- line 1))
    (move-to-column (or column 0))
    (point)))

(defun enfer-get-line-from-file (file line &optional trim)
  (with-current-buffer (find-file-noselect file)
    (save-excursion
      (goto-char (point-min))
      (forward-line (- line 1))
      (let ((string (thing-at-point 'line)))
        (if trim
            (replace-regexp-in-string "\\(\\`[[:space:]\n]*\\|[[:space:]\n]*\\'\\)" "" string)
          string)))))

(defun enfer-get-entire-buffer (buffer)
  (with-current-buffer buffer
    (save-restriction
      (widen)
      (buffer-substring-no-properties (point-min) (point-max))))
)

(defun +color-name-lighter-than (a b)
  (> (nth 2 (apply #'color-rgb-to-hsl (color-name-to-rgb a)))
     (nth 2 (apply #'color-rgb-to-hsl (color-name-to-rgb b))))
)


(defun gas*shut-up (orig-fn &rest args)
  "Generic advisor for silencing noisy functions."
  (quiet! (apply orig-fn args)))

(defun gas/rename-file-and-buffer ()
  "Rename current buffer and the file it is visiting, if any."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (rename-buffer (read-from-minibuffer "New name: " (buffer-name)))
      (let ((new-name (read-file-name "New name: " filename)))
        (if (vc-backend filename)
            (vc-rename-file filename new-name)
          (rename-file filename new-name t))
        (set-visited-file-name new-name t t)))))

(defun gas/delete-file-and-buffer ()
  "Kill the current buffer and delete the file it is visiting, if any."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (kill-buffer)
      (if (vc-backend filename)
          (vc-delete-file filename)
        (when (y-or-n-p (format "Are you sure you want to delete %s? " filename))
          (delete-file filename delete-by-moving-to-trash)
          (message "Deleted file %s" filename)
          (kill-buffer))))))

(defun gas/previous-blank-line ()
  "Move point to the previous blank line"
  (interactive)
  (move-end-of-line nil)
  (if (search-backward-regexp "^[\t ]*\n[\t ]*[^\t\n ]+" nil "NOERROR") nil
    (goto-char (point-min))))

(defun gas/next-blank-line ()
  "Move point to the next blank line"
  (interactive)
  (move-beginning-of-line nil)
  (if (not (search-forward-regexp "[^\t\n ]\n[\t ]*$" nil "NOERROR"))
      (goto-char (point-max))))

(defun gas/open-line-above ()
  "Insert an empty line above the current line.
Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line 0)
  (newline-and-indent))

(defun gas/open-line-below ()
  "Insert an empty line below the current line.
Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun gas/exit-emacs (arg)
  "Exit Emacs, possibly killing the daemon and/or saving buffer.
When ARG is:
- nil or negative, it will kill the current terminal
- `universal-argument' or positive, it will kill the daemon
- a number, it will save all buffers automatically"
  (interactive "P")
  (when (or (numberp arg) (eq arg '-))
    (setq arg (prefix-numeric-value arg)))
  (let* ((save-without-asking (numberp arg))
         (kill-server (or (equal arg '(4))
                          (and save-without-asking
                               (>= arg 0)))))
    (if kill-server
        (save-buffers-kill-emacs save-without-asking)
      (save-buffers-kill-terminal save-without-asking))))

(defmacro enfer-measure-time (&rest body)
  "Measure and return the running time of the code block."
  (declare (indent defun))
  (let ((start (make-symbol "start")))
    `(let ((,start (float-time)))
       ,@body
       (- (float-time) ,start))))


;;; key bindings


;; Windows management
;(require 'core-windows)


(use-package hydra
  :bind ("C-c m" . hydra-magit/body)
  :config (setq! lv-use-separator t))

(defhydra hydra-zoom (global-map "C-c")
  "zoom"
  ("+" default-text-scale-increase "in")
  ("=" default-text-scale-increase "in")
  ("-" default-text-scale-decrease "out"))




(fset 'yes-or-no-p 'y-or-n-p)
(minibuffer-depth-indicate-mode)

(setq! cursor-in-non-selected-windows t
       highlight-nonselected-windows nil
       visible-cursor nil
       x-stretch-cursor nil)

(blink-cursor-mode -1)

(window-divider-mode)

(setq! jit-lock-defer-time nil
       jit-lock-stealth-nice 0.1
       jit-lock-stealth-time 0.2
       jit-lock-stealth-verbose nil)

(use-package hl-line
  :hook ('emacs-startup-hook #'global-hl-line-mode)
  :config
  (setq! hl-line-sticky-flag nil
         global-hl-line-sticky-flag nil))

(use-package paren
  :after-call (after-find-file doom-before-switch-buffer-hook)
  :config
  (setq show-paren-delay 0
        show-paren-highlight-openparen t
        show-paren-when-point-inside-paren t)
  (show-paren-mode))

(unless (fboundp 'define-fringe-bitmap) (defun define-fringe-bitmap (&rest _)))

(use-package server
  :config
  (add-hook 'after-make-frame-functions (lambda (frame) (select-frame-set-input-focus frame)) t)

  ;; Remove prompt if the file is opened in other clients
  (defun server-remove-kill-buffer-hook ()
    (remove-hook 'kill-buffer-query-functions #'server-kill-buffer-query-function))
  (add-hook 'server-visit-hook #'server-remove-kill-buffer-hook))

(defvar enfer-fonts '(("Hack" . 13)("Iosevka" . 13) ("DejaVu Sans Mono" . 11)
                    ("Inconsolata" . 13) ("Source Code Pro" . 11))
  "List of fonts and sizes. The first one available will be used.")

(defvar enfer-font-faces-changed nil
  "List ARGS passed to custom-set-faces, in order to fix font.")

(defun enfer-font-set-faces (&rest args)
  "Override faces' attributes in the `user' theme.
These settings will remain until a new font is loaded.
ARGS are the same as in `custom-set-faces'."
  (push args enfer-font-faces-changed)
  (apply 'custom-set-faces args))

(defun gas/change-font ()
  (interactive)
  (let* (available-fonts font-name font-size font-setting)
    (dolist (font enfer-fonts)
      (when (member (car font) (font-family-list))
        (push font available-fonts)))

    (push (cons "Monospace" 11) available-fonts)
    (setq available-fonts (nreverse available-fonts))

    (when doom-debug-mode (message "polcies disponible: %s" available-fonts))

    (if (called-interactively-p 'interactive)
        (let* ((chosen (assoc-string (completing-read "Quelle police utiliser? " available-fonts nil t)
                                     available-fonts)))
          (setq font-name (car chosen)
                font-size (read-number "Taille de police: " (cdr chosen))))
      (setq font-name (caar available-fonts)
            font-size (cdar available-fonts)))

    (setq font-setting (format "%s-%d" font-name font-size))
    (set-frame-font font-setting nil t)
    (add-to-list 'default-frame-alist (cons 'font font-setting))

    (dolist (args enfer-font-faces-changed)
      (apply 'custom-theme-reset-faces 'user args))
    (setq enfer-font-faces-changed nil)

    (cond ((string= font-name "Hack")
           (enfer-font-set-faces `(org-table ((t (:family ,(format "Hack Mono-%d" font-size))))))))))


(defface font-lock-todo-face      '((t (:foreground "#dc322f" :weight bold :underline t))) "Face for TODO keywords.")
(defface font-lock-urgent-face    '((t (:foreground "#b58900" :weight bold :underline t))) "Face for URGENT keywords.")
(defface font-lock-note-face      '((t (:foreground "#228b22" :weight bold :underline t))) "Face for NOTE keywords.")
(defface font-lock-study-face     '((t (:foreground "#41728e" :weight bold :underline t))) "Face for STUDY keywords.")
(add-hook! prog-mode (font-lock-add-keywords
                      nil '(("\\<\\(TODO\\|FIXME\\|\\@important\\|IMPORTANT\\)" 1 'font-lock-todo-face t)
                            ("\\<\\(URGENT\\|\\@urgent\\)" 1 'font-lock-urgent-face t)
                            ("\\<\\(NOTE\\|QUOTE\\)" 1 'font-lock-note-face t)
                            ("\\<\\(STUDY\\|LAREVUE\\)" 1 'font-lock-study-face t))))


(use-package doom-modeline
  :config
  (setq! doom-modeline-enable-word-count t))

(setq!
 mode-line-buffer-identification
 `((:eval
    (let ((inherit-faces (if (and buffer-file-name (buffer-modified-p)) '(error bold) 'mode-line-buffer-id)))
      (concat (propertize "%b" 'face inherit-faces)))))
 mode-line-modes '("" mode-name mode-line-process " ")
 mode-line-position
 '((line-number-mode (column-number-mode (column-number-indicator-zero-based " %l:%c" " %l:%C") " %l")
                     (column-number-mode (column-number-indicator-zero-based " :%c" " :%C")))
   (" " mode-line-percent-position " ")))

(defun enfer-setup-appearance (frame)
  (with-selected-frame frame
    ;;(load-theme 'doom-city-lights t)
    (load-theme 'doom-monokai-pro t)
    ;;(load-theme gruvbox t)
    (gas/change-font)

    (doom-modeline-mode)
    (when (> (window-width) 100) (split-window-right))
    (setq! system-time-locale "C")))

(if (daemonp)
    (add-transient-hook! 'after-make-frame-functions 'enfer-setup-appearance)
  (add-transient-hook! 'emacs-startup-hook (enfer-setup-appearance (selected-frame)))
)





(require 'auth-source)
(require 'auth-source-pass)
(auth-source-pass-enable)

(setq! vc-follow-symlinks t
       save-interprogram-paste-before-kill t
       enable-recursive-minibuffers t
       mouse-yank-at-point t)

 (add-hook 'before-save-hook 'time-stamp)

(setq! tab-width 4
       indent-tabs-mode nil
       require-final-newline t
       mode-require-final-newline t
       sentence-end-double-space nil
       tab-always-indent t
       tabify-regexp "^\t* [ \t]+"
       fill-column 90
       word-wrap t
       truncate-lines t
       truncate-partial-width-windows 70)

(add-hook! 'before-save-hook #'delete-trailing-whitespace)
(add-hook! 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)

(setq! scroll-margin 1
       hscroll-margin 2
       hscroll-step 1
       scroll-conservatively 101
       scroll-preserve-screen-position t
       mouse-wheel-scroll-amount '(1)
       mouse-wheel-progressive-speed nil)

(setq! kill-ring-max 5000
       undo-limit (* 20 1024 1024)
       undo-strong-limit (* 40 1024 1024)
       undo-outer-limit (* 100 1024 1024)
       mark-ring-max 5000
       global-mark-ring-max 5000)

(use-package autorevert
  :after-call after-find-file
  :custom
  (auto-revert-verbose nil)
  :config
  (global-auto-revert-mode))

(use-package recentf
  :defer 1
  :after-call after-find-file
  :commands recentf-open-files
  :config
  (setq recentf-save-file (concat enfer-cache-dir "recentf")
        recentf-auto-cleanup 120
        recentf-max-menu-items 0
        recentf-max-saved-items 300
        recentf-filename-handlers '(file-truename)
        recentf-exclude
        (list #'file-remote-p "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\)$"
              "^/tmp/" "^/ssh:" "\\.?ido\\.last$" "\\.revive$" "/TAGS$"
              "^/var/folders/.+$"
              (lambda (file) (file-in-directory-p file enfer-local-dir))))
  (quiet! (recentf-mode)))

(use-package bookmark
  :custom
  (bookmark-default-file (concat enfer-etc-dir "bookmarks"))
  (bookmark-save-flag t))



(use-package projectile :ensure
  :after-call (pre-command-hook after-find-file dired-before-readin-hook)
  :commands (projectile-project-root projectile-project-name projectile-project-p)
  :init
  (setq! projectile-cache-file (concat enfer-cache-dir "projectile.cache")
         projectile-indexing-method (if IS-WINDOWS 'native 'alien)
         projectile-known-projects-file (concat enfer-cache-dir "projectile.projects")
         projectile-globally-ignored-files '(".DS_Store" "Icon" "TAGS")
         projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o")
         projectile-ignored-projects '("~" "/tmp"))

  :config
  ;; Set the projectile-prefix-command binding
  (bind-key "C-c p" 'projectile-command-map projectile-mode-map)

  (setq projectile-completion-system 'ivy
        projectile-enable-caching t)
  (setq! projectile-globally-ignored-directories (append projectile-globally-ignored-directories
                                                         (list (abbreviate-file-name enfer-local-dir)
                                                               ".sync" "node_modules" "flow-typed"))
         projectile-other-file-alist (append projectile-other-file-alist
                                             '(("css"  "scss" "sass" "less" "styl")
                                               ("scss" "css")
                                               ("sass" "css")
                                               ("less" "css")
                                               ("styl" "css"))))
  (push ".project" projectile-project-root-files-bottom-up)

  (add-hook 'dired-before-readin-hook #'projectile-track-known-projects-find-file-hook)

  ;; NOTE(gas): Projectile root-searching functions can cause an infinite loop on TRAMP
  ;; connections, so disable them
  (defun gas*projectile-locate-dominating-file (orig-fn &rest args)
    "Don't traverse the file system if on a remote connection."
    (unless (file-remote-p default-directory)
      (apply orig-fn args)))
  (advice-add #'projectile-locate-dominating-file :around #'gas*projectile-locate-dominating-file)

  (defun gas*projectile-cache-current-file (orig-fun &rest args)
    "Don't cache ignored files."
    (unless (cl-loop for path in (projectile-ignored-directories)
                     if (string-prefix-p (or buffer-file-name "") (expand-file-name path))
                     return t)
      (apply orig-fun args)))
  (advice-add #'projectile-cache-current-file :around #'gas*projectile-cache-current-file)

  (projectile-mode))

 (use-package counsel-projectile :ensure
   :bind
     (([remap projectile-find-file]        .     counsel-projectile-find-file)
      ([remap projectile-find-dir]         .     counsel-projectile-find-dir)
      ([remap projectile-switch-to-buffer] .     counsel-projectile-switch-to-buffer)
      ([remap projectile-grep]             .     counsel-projectile-grep)
      ([remap projectile-ag]               .     counsel-projectile-ag)
      ([remap projectile-switch-project]   .     counsel-projectile-switch-project))

  :custom
  (projectile-completion-system 'ivy))

(use-package avy :ensure
  :bind
  ("C-:"   .   avy-goto-char)
  ("C-'"   .   avy-goto-char-timer)
  ("M-g f" .   avy-goto-line)
  ("M-g w" .   avy-goto-word-1)
  :config
  (setq! avy-all-windows nil
         avy-background t))

(use-package dumb-jump :ensure
  :commands dumb-jump-result-follow
  :bind
  ("M-g j" .    gas@dumb-jump/body)
  :config
  (defhydra gas@dumb-jump (:color blue :columns 3)
    "Dumb Jump"
    ("j" dumb-jump-go "Go")
    ("o" dumb-jump-go-other-window "Other window")
    ("e" dumb-jump-go-prefer-external "Go external")
    ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
    ("i" dumb-jump-go-prompt "Prompt")
    ("l" dumb-jump-quick-look "Quick look")
    ("b" dumb-jump-back "Back"))

  (setq dumb-jump-selector 'ivy
        dumb-jump-default-project enfer-develop-dir
        dumb-jump-aggressive nil
        dumb-jump-use-visible-window nil
        dumb-jump-prefer-searcher 'rg)
)

(use-package imenu
  :custom
  (imenu-auto-rescan-maxout 500000)
  (imenu-auto-rescan t))

(use-package imenu-anywhere :ensure
  :init (global-set-key (kbd "C-.") 'imenu-anywhere)
  :custom
  (imenu-anywhere-delimiter ": ")
  :config (defun jcs-use-package ()
            (add-to-list 'imenu-generic-expression
             '("Used Packages"
               "\\(^\\s-*(use-package +\\)\\(\\_<.+\\_>\\)" 2)))
  (add-hook 'emacs-lisp-mode-hook #'jcs-use-package))

(add-hook!
  '(imenu-after-jump-hook
    evil-jumps-post-jump-hook
    counsel-grep-post-action-hook
    dumb-jump-after-jump-hook)
  #'recenter)

(use-package electric
  :init
  (electric-indent-mode))

(use-package elec-pair
  :init
  (electric-pair-mode))

(use-package expand-region :ensure)


;;;; dired
;; directory-browsing commands
(use-feature dired
  :after-call (dired-mode-hook)
  :init
  (defun my-find-name-dired (pattern)
    "Find files in `default-directory' using `rg' if available.
PREFIX forces the use of `find'."
    (interactive "sFind-name (filename wildcard): ")
    (if (and (not current-prefix-arg) (executable-find "rg"))
        (let ((find-program (concat "rg -g " (shell-quote-argument pattern) " --files"))
              (find-ls-option (cons "" "-dilsb")))
          (find-dired default-directory ""))
      (find-dired
       default-directory
       (concat find-name-arg " " (shell-quote-argument pattern)))))

  (setq dired-auto-revert-buffer t)
  (setq dired-no-confirm
        '(byte-compile chgrp chmod chown copy delete load move symlink))
  (setq dired-deletion-confirmer (lambda (x) t))
  :bind (:map dired-mode-map ("`" . dired-toggle-read-only))
  :config
  ;; make rename use ido and not helm
  (put 'dired-do-rename 'ido 'find-file)
  ;; make copy use ido and not helm
  (put 'dired-do-copy 'ido 'find-file))

  ;; Rename files editing their names in dired buffers
  (use-package wdired
  :after-call (dired-mode-hook)
    :init
    ;; allow changing of file permissions
    (setq wdired-allow-to-change-permissions t))


(use-package diredfl :ensure
  :after-call (dired-mode-hook)
  :config (diredfl-global-mode))

;; dired+ adds some features to standard dired (like reusing buffers)
  (use-package dired+
    :after-call (dired-mode-hook)
    :init
    (setq diredp-hide-details-initially-flag nil)
    (setq diredp-hide-details-propagate-flag nil)

    :config
    (diredp-toggle-find-file-reuse-dir 1))

  (use-package ediff
  :custom
  (ediff-split-window-function #'split-window-horizontally)
  (ediff-window-setup-function #'ediff-setup-windows-plain)
  (ediff-diff-options "-w")

  :config
  (add-hook! 'ediff-prepare-buffer-hook (when (derived-mode-p 'outline-mode) (outline-show-all)))
  (defvar ediff--saved-wconf nil)
  (defun ediff|save-wconf ()
    (setq ediff--saved-wconf (current-window-configuration)))
  (defun ediff|restore-wconf ()
    (set-window-configuration ediff--saved-wconf))
  (add-hook 'ediff-before-setup-hook #'ediff|save-wconf)
  (add-hook! '(ediff-quit-hook ediff-suspend-hook) #'ediff|restore-wconf 'append))

(use-feature apropos
  :custom
  (apropos-do-all t))

(use-package ispell
  :when (executable-find "hunspell")
  :custom
  (ispell-program-name "hunspell")
  (ispell-really-hunspell t))

(use-feature uniquify
  :custom
  (uniquify-buffer-name-style 'forward)
  (uniquify-separator "/")
  (uniquify-after-kill-buffer-p t))

(use-feature time
  :custom
  (display-time-24hr-format t)
  (display-time-load-average-threshold 1.5))

(use-feature tramp
  :custom
  (tramp-default-method "ssh")
  (tramp-backup-directory-alist '(("." . "/tmp/tramp-backup-files/")))
  (tramp-auto-save-directory   (concat enfer-cache-dir "tramp-auto-save/"))
  (tramp-persistency-file-name (concat enfer-cache-dir "tramp-persistency.el"))
  (tramp-default-proxies-alist '(((regexp-quote (system-name)) nil nil)
                                 (nil "\\`root\\'" "/ssh:%h:"))))

(use-package treemacs :ensure
  :init
  (setq! treemacs-persist-file (concat enfer-cache-dir "treemacs-persist")))

(bind-key "M-g" 'goto-line)

(bind-key "M-`" 'other-frame)

(bind-key "M-/" 'hippie-expand)




;(let ((elapsed (float-time (time-subtract (current-time)
;                                          emacs-start-time))))
;  (message "Loading %s...done (%.3fs)" load-file-name elapsed))

;(add-hook 'emacs-startup-hook
 ;         `(lambda ()
  ;           (let ((elapsed
  ;                  (float-time
  ;                   (time-subtract (current-time) emacs-start-time))))
  ;             (message "Loading %s...done (%.3fs) [after-init]"
					;                     ,load-file-name elapsed))) t)


(defun enfer-initialise ()
  "Load Enfer's core files for an interactive session."
  (let (;; `doom-autoload-file' tells Emacs where to load all its functions
          ;; from. This includes everything in core/autoload/*.el and autoload
          ;; files in enabled modules.
          (core-autoloads-p (doom-load-autoloads-file doom-autoload-file noerror))
          ;; Loads `doom-package-autoload-file', which loads a concatenated
          ;; package autoloads file which caches `load-path', `auto-mode-alist',
          ;; `Info-directory-list', and `doom-disabled-packages'. A big
          ;; reduction in startup time.
          (pkg-autoloads-p (doom-load-autoloads-file doom-package-autoload-file noerror)))

    ;; Eagerly load these libraries because we may be in a session that hasn't been
        ;; fully initialized (e.g. where autoloads files haven't been generated or
        ;; `load-path' populated).
        (mapc (doom-rpartial #'load nil (not doom-debug-mode) 'nosuffix)
              (file-expand-wildcards (concat enfer-core-dir "autoload/*.el")))
        (require 'core-keybinds)
        (require 'core-ui)
        (require 'core-nav)
        (require 'core-editor)
        (require 'core-coding)))


(provide 'core)
;;; core.el ends here
